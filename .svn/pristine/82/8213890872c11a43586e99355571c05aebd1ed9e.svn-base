#!/usr/bin/perl -w

use strict;
use utf8;
use Data::Dumper;
use IO::Handle;
use Bot4;
use IRC::Connection::Client;
use lib "./rcbot";
use ClueBot;
use Notify;
use Log::Any;
use AnyEvent::Impl::Perl;
use AnyEvent;

my $logger = Log::Any->get_logger;

my $bot = new Bot4;
$bot->single(1);
$bot->setup;

$SIG{CHLD} = 'IGNORE';

# FIXME: okresowo Å‚aduj ciastka !

my $client = new IRC::Connection::Client(
	'nick'     => 'BeauBotRC',
	'realname' => '[[pl:User:Beau.Bot]]',
	'username' => 'beau',
	'server'   => 'irc.wikimedia.org:6667',
	'engine'   => 'IRC::Engine::AnyEvent',
);

sub spawn_task {
	my $pid = fork();
	return if $pid;
	die "fork() failed: $!" unless defined $pid;
	my $proc = shift;
	eval { &$proc(@_); };
	if ($@) {
		$logger->warn("Child process died: $@");
	}
	exit(0);

	#kill 'KILL', $$;
}

sub m_welcome {
	my $this = shift;

	$logger->info("Connected, joining channels");

	$this->join("#pl.wikipedia,#pl.wikisource,#meta.wikimedia,#pl.wiktionary,#test.wikipedia");
}

sub m_nicknameinuse {
	my $this = shift;
	$client->send( "NICK $this->{nick}" . int( rand(10) ) );
}

sub m_channel_privmsg {
	my ( $this, $data ) = @_;

	utf8::decode( $data->{content} );

	$logger->debug("$data->{target}, $data->{content}");

	my %args = (

		#
		'channel' => $data->{channel}->{name},
	);
	if ( @args{ 'title', 'action', 'diff', 'user', 'size', 'summary' } = $data->{content} =~ m{^\x0314\[\[\x0307(.+?)\x0314\]\]\x034 (.*?)\x0310 \x0302(.*?)\x03 \x035\*\x03 \x0303(.+?)\x03 \x035\*\x03 \(?\x02?\+?(.*?)\x02?\)? \x0310(.*?)\x03?$} ) {

		if ( $args{diff} ne '' ) {

			$args{flags}{bot}   = 1 if $args{action} =~ s/B//;
			$args{flags}{new}   = 1 if $args{action} =~ s/N//;
			$args{flags}{minor} = 1 if $args{action} =~ s/M//;

			$args{approved} = $args{action} =~ s/!// ? 0 : 1;

			warn "Unknown flags: $args{action}" unless $args{action} eq '';

			$args{action} = 'edit';
		}

		$logger->debug( Dumper( \%args ) )
		  if $logger->is_debug;
		$args{event} = "rc $args{action}";
		$this->invokeHandler(%args);
	}
	else {
		$logger->warn("Unable to parse message from $data->{prefix} to $data->{target}: $data->{content}");
	}
}

$client->registerHandler( '001',             \&m_welcome );
$client->registerHandler( '433',             \&m_nicknameinuse );
$client->registerHandler( 'channel privmsg', \&m_channel_privmsg );

Notify::setup( $client, $bot );
ClueBot::setup( $client, $bot );

my $quit;

$client->registerHandler(
	'disconnected',
	sub {
		$logger->info("Client has been disconnected");
		$quit->send;
	}
);
$client->registerHandler(
	'error',
	sub {
		my ( undef, $data ) = @_;

		if ( $data->{message} ) {
			$logger->info("Client has reported an error: $data->{message}");
		}
		else {
			$logger->info("Client has reported an unknown error");
		}
		$quit->send;
	}
);

while (1) {
	$quit = AnyEvent->condvar;
	eval {    #
		$logger->debug("Connecting");
		$client->connect;
		$logger->debug("Entering event loop");
		$quit->recv;
	};
	if ($@) {
		$logger->error($@);
	}
	sleep(10);
}

# perltidy -et=8 -l=0 -i=8

__END__

Actions:
  delete
  restore
  create
  block
  reblock
  unblock
  move
  move_redir
  overwrite
  edit
  unknown
  protect
  unprotect
  upload
  modify
  renameuser
  usergroups
  rights
  lockandhid
  lock
  hide
  create2
  gblock
  revision
  event
  approve
  approve-i
  approve-a
  approve-ia
  unapprove
  patrol
  autocreate
  autopromote
