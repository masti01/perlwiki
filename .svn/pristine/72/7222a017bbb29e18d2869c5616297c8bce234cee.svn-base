package RevisionCache;

use strict;
use warnings;
use utf8;
use File::Spec;
use File::Path qw(make_path);
use IO::Uncompress::Bunzip2 qw(bunzip2 $Bunzip2Error);
use IO::Compress::Bzip2 qw(bzip2 $Bzip2Error);

sub new {
	my $caller = shift;
	my $class = ref($caller) || $caller;

	my $this = {
		'project' => undef,
		'path'    => undef,
		@_
	};

	die "Path is not defined\n"
	  unless defined $this->{path};

	die "Project is not defined\n"
	  unless defined $this->{project};

	my $path = File::Spec->catfile( $this->{path}, $this->{project} );
	make_path $path
	  or die "Unable to create directory '$path': $!\n"
	  unless -e $path;

	bless $this, $class;
	return $this;
}

sub loadRevision {
	my $this   = shift;
	my $number = shift;
	my $file   = $this->getRevisionFile($number);

	die "Cannot open $file: $!"
	  unless open( my $fh, '<', $file );

	my $data;
	my $result = bunzip2 $fh, \$data;
	close($fh);

	die "bunzip2 failed: $Bunzip2Error\n"
	  unless $result;

	utf8::decode($data);
	return $data;
}

sub storeRevision {
	my $this    = shift;
	my $number  = shift;
	my $content = shift;
	my $file    = $this->getRevisionFile($number);

	utf8::encode($content)
	  if utf8::is_utf8($content);

	die "Cannot open $file: $!"
	  unless open( my $fh, '>', $file );
	my $result = bzip2 \$content, $fh;
	close($fh);

	die "bzip2 failed: $Bzip2Error\n"
	  unless $result;

}

sub isRevisionCached {
	my $this   = shift;
	my $number = shift;
	my $file   = $this->getRevisionFile($number);
	return -e $file;
}

sub getRevisionFile {
	my $this   = shift;
	my $number = shift;

	die "Revision identifier is missing\n"
	  unless defined $number;

	return File::Spec->catfile( $this->{path}, $this->{project}, $number . ".bz2" );
}

1;
