#!/usr/bin/perl -w

use strict;
use utf8;
use Bot4;
use Log::Any;

my $reason     = '';
my $sleep      = 10;
my $noredirect = 0;

my $bot = new Bot4;
$bot->addOption( "reason|summary=s", \$reason, "Move summary" );
$bot->addOption( "sleep=i",          \$sleep,  "Move interval" );

$bot->addOption( "noredirect|suppressredirect", \$noredirect, "Performs page move without leaving the redirect behind" );

$bot->setup;

my $logger = Log::Any::get_logger;

utf8::decode($reason);

my $api = $bot->getApi;
$api->checkAccount;

my @queue;

sub processQueue {
	my @titles = splice( @queue, 0, 50 );
	my %tokens = map { $_->{title} => $_ } $api->getTokens( 'move', 'titles', map { $_->[0] } @titles );

	foreach my $item (@titles) {
		my ( $oldtitle, $newtitle ) = @{$item};

		my $page = $tokens{$oldtitle};
		unless ($page) {
			$logger->warn("Unable to fetch information about $oldtitle, ignoring");
			next;
		}
		if ( exists $page->{missing} ) {
			$logger->warn("Page '$oldtitle' does not exist");
			next;
		}
		$logger->info("Moving '$oldtitle' -> '$newtitle'");

		eval {
			my %request = (    #
				'token' => $page->{movetoken},
				'from'  => $oldtitle,
				'to'    => $newtitle,
			);
			$request{noredirect} = 1 if $noredirect;

			$api->move(%request);
		};
		if ($@) {
			$logger->error("Unable to move '$oldtitle' -> '$newtitle': $@");
		}
		sleep($sleep) if $sleep;
	}
}

while (<>) {
	utf8::decode($_);
	s/\s+$//g;
	next if $_ eq '';

	unless (/\[\[:?(.+?)\]\] -> \[\[:?(.+?)\]\]/) {
		die "Unable to parse: $_\n";
	}
	if ( $1 eq $2 ) {
		$logger->warn("Ignoring move from '$1' to itself");
		next;
	}
	push @queue, [ $1, $2 ];
	processQueue if @queue > 50;
}

while (@queue) {
	processQueue;
}

# perltidy -et=8 -l=0 -i=8
